
Changing optimization level for Function add
	Before: -O2 ; After: -O0
	FastISel is enabled



=== add
Enabling fast-isel
Found argument copy elision candidate:   %3 = alloca i32, align 4
Found argument copy elision candidate:   %4 = alloca i32, align 4
Initial selection DAG: %bb.0 'add:'
SelectionDAG has 21 nodes:
  t0: ch,glue = EntryToken
  t6: i32 = Constant<0>
      t2: i32,ch = CopyFromReg t0, Register:i32 %0
    t8: ch = store<(store (s32) into %ir.3)> t0, t2, FrameIndex:i32<0>, undef:i32
    t4: i32,ch = CopyFromReg t0, Register:i32 %1
  t10: ch = store<(store (s32) into %ir.4)> t8, t4, FrameIndex:i32<1>, undef:i32
  t11: i32,ch = load<(dereferenceable load (s32) from %ir.3)> t10, FrameIndex:i32<0>, undef:i32
  t12: i32,ch = load<(dereferenceable load (s32) from %ir.4)> t10, FrameIndex:i32<1>, undef:i32
    t15: ch = TokenFactor t11:1, t12:1
    t13: i32 = add nsw t11, t12
  t16: ch = store<(store (s32) into %ir.5)> t15, t13, FrameIndex:i32<2>, undef:i32
    t17: i32,ch = load<(dereferenceable load (s32) from %ir.5)> t16, FrameIndex:i32<2>, undef:i32
  t19: ch,glue = CopyToReg t16, Register:i32 $v0, t17
  t20: ch = Cpu0ISD::Ret t19, Register:i32 $v0, t19:1


Optimized lowered selection DAG: %bb.0 'add:'
SelectionDAG has 20 nodes:
  t0: ch,glue = EntryToken
      t2: i32,ch = CopyFromReg t0, Register:i32 %0
    t8: ch = store<(store (s32) into %ir.3)> t0, t2, FrameIndex:i32<0>, undef:i32
    t4: i32,ch = CopyFromReg t0, Register:i32 %1
  t10: ch = store<(store (s32) into %ir.4)> t8, t4, FrameIndex:i32<1>, undef:i32
  t11: i32,ch = load<(dereferenceable load (s32) from %ir.3)> t10, FrameIndex:i32<0>, undef:i32
  t12: i32,ch = load<(dereferenceable load (s32) from %ir.4)> t10, FrameIndex:i32<1>, undef:i32
    t15: ch = TokenFactor t11:1, t12:1
    t13: i32 = add nsw t11, t12
  t16: ch = store<(store (s32) into %ir.5)> t15, t13, FrameIndex:i32<2>, undef:i32
    t17: i32,ch = load<(dereferenceable load (s32) from %ir.5)> t16, FrameIndex:i32<2>, undef:i32
  t19: ch,glue = CopyToReg t16, Register:i32 $v0, t17
  t20: ch = Cpu0ISD::Ret t19, Register:i32 $v0, t19:1


Type-legalized selection DAG: %bb.0 'add:'
SelectionDAG has 20 nodes:
  t0: ch,glue = EntryToken
      t2: i32,ch = CopyFromReg t0, Register:i32 %0
    t8: ch = store<(store (s32) into %ir.3)> t0, t2, FrameIndex:i32<0>, undef:i32
    t4: i32,ch = CopyFromReg t0, Register:i32 %1
  t10: ch = store<(store (s32) into %ir.4)> t8, t4, FrameIndex:i32<1>, undef:i32
  t11: i32,ch = load<(dereferenceable load (s32) from %ir.3)> t10, FrameIndex:i32<0>, undef:i32
  t12: i32,ch = load<(dereferenceable load (s32) from %ir.4)> t10, FrameIndex:i32<1>, undef:i32
    t15: ch = TokenFactor t11:1, t12:1
    t13: i32 = add nsw t11, t12
  t16: ch = store<(store (s32) into %ir.5)> t15, t13, FrameIndex:i32<2>, undef:i32
    t17: i32,ch = load<(dereferenceable load (s32) from %ir.5)> t16, FrameIndex:i32<2>, undef:i32
  t19: ch,glue = CopyToReg t16, Register:i32 $v0, t17
  t20: ch = Cpu0ISD::Ret t19, Register:i32 $v0, t19:1


Legalized selection DAG: %bb.0 'add:'
SelectionDAG has 20 nodes:
  t0: ch,glue = EntryToken
      t2: i32,ch = CopyFromReg t0, Register:i32 %0
    t8: ch = store<(store (s32) into %ir.3)> t0, t2, FrameIndex:i32<0>, undef:i32
    t4: i32,ch = CopyFromReg t0, Register:i32 %1
  t10: ch = store<(store (s32) into %ir.4)> t8, t4, FrameIndex:i32<1>, undef:i32
  t12: i32,ch = load<(dereferenceable load (s32) from %ir.4)> t10, FrameIndex:i32<1>, undef:i32
  t11: i32,ch = load<(dereferenceable load (s32) from %ir.3)> t10, FrameIndex:i32<0>, undef:i32
    t15: ch = TokenFactor t11:1, t12:1
    t13: i32 = add nsw t11, t12
  t16: ch = store<(store (s32) into %ir.5)> t15, t13, FrameIndex:i32<2>, undef:i32
    t17: i32,ch = load<(dereferenceable load (s32) from %ir.5)> t16, FrameIndex:i32<2>, undef:i32
  t19: ch,glue = CopyToReg t16, Register:i32 $v0, t17
  t20: ch = Cpu0ISD::Ret t19, Register:i32 $v0, t19:1


Optimized legalized selection DAG: %bb.0 'add:'
SelectionDAG has 20 nodes:
  t0: ch,glue = EntryToken
      t2: i32,ch = CopyFromReg t0, Register:i32 %0
    t8: ch = store<(store (s32) into %ir.3)> t0, t2, FrameIndex:i32<0>, undef:i32
    t4: i32,ch = CopyFromReg t0, Register:i32 %1
  t10: ch = store<(store (s32) into %ir.4)> t8, t4, FrameIndex:i32<1>, undef:i32
  t12: i32,ch = load<(dereferenceable load (s32) from %ir.4)> t10, FrameIndex:i32<1>, undef:i32
  t11: i32,ch = load<(dereferenceable load (s32) from %ir.3)> t10, FrameIndex:i32<0>, undef:i32
    t15: ch = TokenFactor t11:1, t12:1
    t13: i32 = add nsw t11, t12
  t16: ch = store<(store (s32) into %ir.5)> t15, t13, FrameIndex:i32<2>, undef:i32
    t17: i32,ch = load<(dereferenceable load (s32) from %ir.5)> t16, FrameIndex:i32<2>, undef:i32
  t19: ch,glue = CopyToReg t16, Register:i32 $v0, t17
  t20: ch = Cpu0ISD::Ret t19, Register:i32 $v0, t19:1


===== Instruction selection begins: %bb.0 ''

ISEL: Starting selection on root node: t20: ch = Cpu0ISD::Ret t19, Register:i32 $v0, t19:1
ISEL: Starting pattern match
  Morphed node: t20: ch = RetLR Register:i32 $v0, t19, t19:1
ISEL: Match complete!

ISEL: Starting selection on root node: t19: ch,glue = CopyToReg t16, Register:i32 $v0, t17

ISEL: Starting selection on root node: t17: i32,ch = load<(dereferenceable load (s32) from %ir.5)> t16, FrameIndex:i32<2>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 5
  Morphed node: t17: i32,ch = LD<Mem:(dereferenceable load (s32) from %ir.5)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, t16
ISEL: Match complete!

ISEL: Starting selection on root node: t16: ch = store<(store (s32) into %ir.5)> t15, t13, FrameIndex:i32<2>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 172
  Morphed node: t16: ch = ST<Mem:(store (s32) into %ir.5)> t13, TargetFrameIndex:i32<2>, TargetConstant:i32<0>, t15
ISEL: Match complete!

ISEL: Starting selection on root node: t13: i32 = add nsw t11, t12
ISEL: Starting pattern match
  Initial Opcode index to 1490
  Match failed at index 1494
  Continuing at 1576
  Match failed at index 1578
  Continuing at 1664
  Match failed at index 1670
  Continuing at 1686
  Morphed node: t13: i32 = ADDu nsw t11, t12
ISEL: Match complete!

ISEL: Starting selection on root node: t15: ch = TokenFactor t11:1, t12:1

ISEL: Starting selection on root node: t11: i32,ch = load<(dereferenceable load (s32) from %ir.3)> t10, FrameIndex:i32<0>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 5
  Morphed node: t11: i32,ch = LD<Mem:(dereferenceable load (s32) from %ir.3)> TargetFrameIndex:i32<0>, TargetConstant:i32<0>, t10
ISEL: Match complete!

ISEL: Starting selection on root node: t12: i32,ch = load<(dereferenceable load (s32) from %ir.4)> t10, FrameIndex:i32<1>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 5
  Morphed node: t12: i32,ch = LD<Mem:(dereferenceable load (s32) from %ir.4)> TargetFrameIndex:i32<1>, TargetConstant:i32<0>, t10
ISEL: Match complete!

ISEL: Starting selection on root node: t10: ch = store<(store (s32) into %ir.4)> t8, t4, FrameIndex:i32<1>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 172
  Morphed node: t10: ch = ST<Mem:(store (s32) into %ir.4)> t4, TargetFrameIndex:i32<1>, TargetConstant:i32<0>, t8
ISEL: Match complete!

ISEL: Starting selection on root node: t8: ch = store<(store (s32) into %ir.3)> t0, t2, FrameIndex:i32<0>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 172
  Morphed node: t8: ch = ST<Mem:(store (s32) into %ir.3)> t2, TargetFrameIndex:i32<0>, TargetConstant:i32<0>, t0
ISEL: Match complete!

ISEL: Starting selection on root node: t4: i32,ch = CopyFromReg t0, Register:i32 %1

ISEL: Starting selection on root node: t2: i32,ch = CopyFromReg t0, Register:i32 %0

ISEL: Starting selection on root node: t18: i32 = Register $v0

ISEL: Starting selection on root node: t3: i32 = Register %1

ISEL: Starting selection on root node: t1: i32 = Register %0

ISEL: Starting selection on root node: t0: ch,glue = EntryToken

===== Instruction selection ends:
Selected selection DAG: %bb.0 'add:'
SelectionDAG has 20 nodes:
  t0: ch,glue = EntryToken
    t4: i32,ch = CopyFromReg t0, Register:i32 %1
      t2: i32,ch = CopyFromReg t0, Register:i32 %0
    t8: ch = ST<Mem:(store (s32) into %ir.3)> t2, TargetFrameIndex:i32<0>, TargetConstant:i32<0>, t0
  t10: ch = ST<Mem:(store (s32) into %ir.4)> t4, TargetFrameIndex:i32<1>, TargetConstant:i32<0>, t8
  t12: i32,ch = LD<Mem:(dereferenceable load (s32) from %ir.4)> TargetFrameIndex:i32<1>, TargetConstant:i32<0>, t10
  t11: i32,ch = LD<Mem:(dereferenceable load (s32) from %ir.3)> TargetFrameIndex:i32<0>, TargetConstant:i32<0>, t10
    t13: i32 = ADDu nsw t11, t12
    t15: ch = TokenFactor t11:1, t12:1
  t16: ch = ST<Mem:(store (s32) into %ir.5)> t13, TargetFrameIndex:i32<2>, TargetConstant:i32<0>, t15
    t17: i32,ch = LD<Mem:(dereferenceable load (s32) from %ir.5)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, t16
  t19: ch,glue = CopyToReg t16, Register:i32 $v0, t17
  t20: ch = RetLR Register:i32 $v0, t19, t19:1


Total amount of phi nodes to update: 0
*** MachineFunction at end of ISel ***
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
Function Live Ins: $a0 in %0, $a1 in %1

bb.0 (%ir-block.2):
  liveins: $a0, $a1
  %1:gprout = COPY $a1
  %0:gprout = COPY $a0
  ST %0:gprout, %stack.0, 0 :: (store (s32) into %ir.3)
  ST %1:gprout, %stack.1, 0 :: (store (s32) into %ir.4)
  %2:gprout = LD %stack.0, 0 :: (dereferenceable load (s32) from %ir.3)
  %3:gprout = LD %stack.1, 0 :: (dereferenceable load (s32) from %ir.4)
  %4:gprout = nsw ADDu killed %2:gprout, killed %3:gprout
  ST killed %4:gprout, %stack.2, 0 :: (store (s32) into %ir.5)
  %5:gprout = LD %stack.2, 0 :: (dereferenceable load (s32) from %ir.5)
  $v0 = COPY %5:gprout
  RetLR implicit $v0

# End machine code for function add.


Restoring optimization level for Function add
	Before: -O0 ; After: -O2
